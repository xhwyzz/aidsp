{"version":3,"sources":["index.js"],"names":["Option","Select","children","i","push","key","toString","handleChange","value","console","log","Demo","state","data","handleSubmit","e","preventDefault","props","form","validateFields","err","values","normFile","Array","isArray","fileList","fetch","params","pid","window","location","pathname","split","length","reqwest","url","protocol","host","method","then","setState","setFieldsValue","this","getFieldDecorator","formItemLayout","labelCol","span","wrapperCol","onSubmit","Item","label","rules","required","message","placeholder","type","valuePropName","getValueFromEvent","name","action","listType","mode","style","width","onChange","offset","htmlType","React","Component","WrappedDemo","Form","create","project_name","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.249289d4.chunk.js","sourcesContent":["\r\nimport React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport 'antd/dist/antd.css';\r\nimport './index.css';\r\nimport {\r\n  Form,\r\n  Select,\r\n  InputNumber,\r\n  Switch,\r\n  Radio,\r\n  Slider,\r\n  Button,\r\n  Upload,\r\n  Icon,\r\n  Rate,\r\n  Checkbox,\r\n  Row,\r\n  Col,\r\n  Input,\r\n  DatePicker\r\n} from 'antd';\r\nimport reqwest from 'reqwest';\r\n\r\nconst { Option } = Select;\r\nconst props = {\r\n  onChange({ file, fileList }) {\r\n    if (file.status !== 'uploading') {\r\n      console.log(file, fileList);\r\n    }\r\n  },\r\n  defaultFileList: [\r\n    {\r\n      uid: '1',\r\n      name: 'xxx.png',\r\n      status: 'done',\r\n      response: 'Server Error 500', // custom error message to show\r\n      url: 'http://www.baidu.com/xxx.png',\r\n    },\r\n  ],\r\n};\r\nconst children = [];\r\nfor (let i = 10; i < 36; i++) {\r\n  children.push(<Option key={i.toString(36) + i}>{i.toString(36) + i}</Option>);\r\n}\r\n\r\nfunction handleChange(value) {\r\n  console.log(`selected ${value}`);\r\n}\r\nclass Demo extends React.Component {\r\n  state = {\r\n    data: [],\r\n  }\r\n  handleSubmit = e => {\r\n    e.preventDefault();\r\n    this.props.form.validateFields((err, values) => {\r\n      if (!err) {\r\n        console.log('Received values of form: ', values);\r\n      }\r\n    });\r\n  };\r\n\r\n  normFile = e => {\r\n    console.log('Upload event:', e);\r\n    if (Array.isArray(e)) {\r\n      return e;\r\n    }\r\n    return e && e.fileList;\r\n  };  \r\n\r\n  componentDidMount() {\r\n    this.fetch();\r\n  }\r\n\r\n  fetch = (params = {}) => {\r\n    console.log('params:', params);\r\n    const pid = window.location.pathname.split(\"/\")[window.location.pathname.split(\"/\").length-1]\r\n    reqwest({\r\n      url:window.location.protocol + \"//\"+window.location.host + '/aidsp/api/project/' + pid + '/?format=json',\r\n      method: 'get',\r\n    }).then(data => {\r\n      this.setState({data: data});\r\n      this.props.form.setFieldsValue(this.state.data)\r\n\r\n    });\r\n  };\r\n  \r\n  render() {\r\n    const { getFieldDecorator } = this.props.form;\r\n    const formItemLayout = {\r\n      labelCol: { span: 6 },\r\n      wrapperCol: { span: 14 },\r\n      data: this.state.data,\r\n    };\r\n\r\n    return (\r\n      <Form {...formItemLayout} onSubmit={this.handleSubmit }>\r\n        <Form.Item label=\"项目名称\">\r\n          {getFieldDecorator('project_name', {\r\n            rules: [{ required: true, message: '请输入项目名称!' }],\r\n          })(\r\n            <Input placeholder=\"请输入项目名称\" key='sddsd'></Input>,\r\n          )}\r\n        </Form.Item>\r\n        <Form.Item label=\"状态\">\r\n          {getFieldDecorator('status', {\r\n            rules: [{ required: true, message: '请选择状态!' }],\r\n          })(\r\n            <Select placeholder=\"请选择状态\">\r\n              <Option value=\"未开始\">未开始</Option>\r\n              <Option value=\"准备中\">准备中</Option>\r\n              <Option value=\"数据采集\">数据采集</Option>\r\n              <Option value=\"数据标注\">数据标注</Option>\r\n              <Option value=\"暂停\">暂停</Option>\r\n              <Option value=\"完结\">完结</Option>\r\n            </Select>,\r\n          )}\r\n        </Form.Item>\r\n        <Form.Item label=\"创建时间\">\r\n          {getFieldDecorator('create_time', {\r\n            rules: [{ type: 'object', required: true, message: 'Please select time!' }],}\r\n          )\r\n          (<DatePicker />)}\r\n        </Form.Item>\r\n        <Form.Item label=\"结束时间\">\r\n          {getFieldDecorator('end_time', {\r\n            rules: [{ type: 'object', required: true, message: 'Please select time!' }],}\r\n          )(<DatePicker />)}\r\n        </Form.Item>\r\n        <Form.Item label=\"项目背景\" >\r\n          {getFieldDecorator('background', {\r\n            valuePropName: 'fileList',\r\n            getValueFromEvent: this.normFile,\r\n          })(\r\n            <Upload name=\"logo\" action=\"/upload.do\" listType=\"picture\">\r\n              <Button>\r\n                <Icon type=\"upload\" /> Click to upload\r\n              </Button>\r\n            </Upload>,\r\n          )}\r\n        </Form.Item>\r\n        <Form.Item label=\"需求总量\" >\r\n          {getFieldDecorator('total_demand', {\r\n            rules: [{ required: true, message: '请输入需求总量!' }],\r\n          })(\r\n            <InputNumber ></InputNumber>,\r\n          )}\r\n        </Form.Item>\r\n        <Form.Item label=\"需求数量描述\" >\r\n          {getFieldDecorator('total_describe', {          })(\r\n            <Input placeholder=\"请输入需求数量描述\"></Input>,\r\n          )}\r\n        </Form.Item>\r\n        <Form.Item label=\"截止时间\">\r\n          {getFieldDecorator('deadline', {\r\n            rules: [{ type: 'object', required: true, message: 'Please select time!' }],}\r\n          )(<DatePicker />)}\r\n        </Form.Item>\r\n        <Form.Item label=\"文档\" >\r\n          {getFieldDecorator('documents', {\r\n            valuePropName: 'fileList',\r\n            getValueFromEvent: this.normFile,\r\n          })(\r\n            <Upload name=\"logo\" action=\"/upload.do\" listType=\"picture\">\r\n              <Button>\r\n                <Icon type=\"upload\" /> Click to upload\r\n              </Button>\r\n            </Upload>,\r\n          )}\r\n        </Form.Item>\r\n        <Form.Item label=\"标签\">\r\n          {getFieldDecorator('labels', {\r\n          })(\r\n          <Select mode=\"tags\" style={{ width: '100%' }} placeholder=\"请输入标签\" onChange={handleChange}>\r\n            {children}\r\n          </Select>,\r\n          )}\r\n        </Form.Item>\r\n        <Form.Item label=\"创建人\">\r\n          {getFieldDecorator('users_found', {\r\n            rules: [{ required: true, message: '请输入创建人!' }],\r\n          })(\r\n            <Input placeholder=\"请输入创建人\"></Input>,\r\n          )}\r\n        </Form.Item>\r\n        <Form.Item label=\"管理人\">\r\n          {getFieldDecorator('users_manager', {\r\n          })(\r\n            <Input placeholder=\"请输入管理人\"></Input>,\r\n          )}\r\n        </Form.Item>\r\n        <Form.Item label=\"参与人\">\r\n          {getFieldDecorator('users_attend', {\r\n          })(\r\n            <Input placeholder=\"请输入参与人\"></Input>,\r\n          )}\r\n        </Form.Item>\r\n        <Form.Item wrapperCol={{ span: 12, offset: 6 }}>\r\n          <Button type=\"primary\" htmlType=\"submit\">\r\n            Submit\r\n          </Button>\r\n        </Form.Item>\r\n      </Form>\r\n    );\r\n\r\n  }\r\n}\r\nconst WrappedDemo = Form.create({ project_name: 'validate_other' })(Demo);\r\n\r\nReactDOM.render(<WrappedDemo />, document.getElementById('container'));\r\n          "],"sourceRoot":""}